#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <WiFi.h>
#include <PubSubClient.h>

// Definições
#define Addr 0x76
#define SEALEVELPRESSURE_HPA (1013.25)
#define TRIGGER_PIN 12
#define ECHO_PIN 14
#define ALARME_PIN 27
#define SDA_PIN 21
#define SCL_PIN 22
#define MQ2_PIN 34
#define LIMIAR_MQ2 300
#define LIMIAR_ENCHENTE_CM 20

// Wi-Fi e MQTT
const char* ssid = "SEU_SSID";
const char* password = "SUA_SENHA";
const char* mqtt_server = "broker.hivemq.com";

// Tópicos MQTT
const char* topico_gas = "esp32/sensores/gas";
const char* topico_enchente = "esp32/sensores/enchente";
const char* topico_clima = "esp32/sensores/clima";

// Instâncias
WiFiClient espClient;
PubSubClient client(espClient);
Adafruit_BME280 bme;

void connectWiFi() {
  Serial.print("Conectando ao Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" conectado!");
}

void connectMQTT() {
  while (!client.connected()) {
    Serial.print("Conectando ao MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println(" conectado!");
    } else {
      Serial.print(" falha, rc=");
      Serial.println(client.state());
      delay(5000);
    }
  }
}

void setup() {
  Wire.begin(SDA_PIN, SCL_PIN);
  Serial.begin(115200);

  pinMode(ALARME_PIN, OUTPUT);
  pinMode(TRIGGER_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  connectWiFi();
  client.setServer(mqtt_server, 1883);

  if (!bme.begin(Addr)) {
    Serial.println("Erro ao iniciar BME280!");
    while (1);
  }

  Serial.println("Sistema iniciado.");
}

void loop() {
  if (!client.connected()) {
    connectMQTT();
  }
  client.loop();

  int gasValor = analogRead(MQ2_PIN);

  float temp = bme.readTemperature();
  float hum = bme.readHumidity();
  float pressao = bme.readPressure() / 100.0F;

  long duracao, distancia_cm;
  digitalWrite(TRIGGER_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIGGER_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);

  duracao = pulseIn(ECHO_PIN, HIGH, 25000);
  distancia_cm = duracao * 0.034 / 2;

  if (distancia_cm > 0 && distancia_cm < LIMIAR_ENCHENTE_CM) {
    digitalWrite(ALARME_PIN, HIGH);
  } else {
    digitalWrite(ALARME_PIN, LOW);
  }

  // Monta a string no formato que o Node-RED espera
  char payload[128];
  snprintf(payload, sizeof(payload),
           "Temp:%.2f Umid:%.2f Press:%.2f Niv:%ld MQ2:%d",
           temp, hum, pressao, distancia_cm, gasValor);

  client.publish("estacao/dados", payload);

  Serial.println(payload);  // Para debug

  delay(5000);
}
